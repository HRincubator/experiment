=============================================================================================================
メモ
=============================================================================================================

	GitHub コパイロット　拡張機能　ChatGPTの機能

下まで教材一覧をスクロールしたとき、追加ロードして教材一覧を追加表示←トランジション　読み込み制御

=============================================================================================================
データ管理
=============================================================================================================
ユーザーマスタ
	ユーザー情報、学習進捗、テスト成績、メッセージ、テスト回答、メモ欄
		一意のユーザーIDを持つ

ファイルサーバー
	履歴書、職務経歴書
		リネームする必要がある　プレフィックス en0001＿氏名_履歴書or職務経歴書,,,

教材
	動画教材
	テスト
	追加教材

=============================================================================================================
管理画面 ----- C：登録、R：照会、U：更新、D:物理削除（基本的になし）
=============================================================================================================

□ユーザー情報管理　新規1件　：S,R
□学習テスト情報管理	：S,R
□メッセージ対応　新着1件　：S,R,C,U
	ステータスを持つ、既読等
	検索、ステータスでフィルター
	メッセージ管理画面ではタブで、未読や返信済み等の切り替えをおこなえるようにする
□更新情報管理　：S,R,C,U
□テスト採点　新着1件　：S,R,C,U
	ステータスを持つ
	採点は点数化、コメント
	ステータスでフィルター

メッセージに送受信に必要なデータ情報：userID msgNO From/To Tree 属性 str
ゲストの送受信は必要ない：不具合報告はできるようにする←ステータスの制御でゲストは不具合報告ができるようにする
下書き有り
ゴミ箱に送られたメッセージは削除フラグがつき非表示
削除フラグは2つで本当の論理削除、ゴミ箱の削除フラグ
ゴミ箱の削除フラグは親Treeに付与される。親のみのフラグでTreeは検索できなくなる

ステータス：未送信（ユーザーのみ）、送信済み、未返信、返信済み、着信（ユーザーのみ）、下書き
	メッセージステータスはデータベースで管理

==================================================================
GoogleFonts
==================================================================
CDNのリンクをheadに読み込み
cssにimport
common cssにfont-famiryを適用

------------------------------------------------------------
Scss
------------------------------------------------------------
@mixin...例えばボタンアローをどのボタンでも同じ形で使いまわしたい場合に「@mixin クラス名」を付けて作成すると、
		使用したいクラスの中で「@include クラス名」で使い回せるようになる

_variables.scss...変数をまとめたファイル。変数を使用するには、使用したいファイルの先頭で「@import "variables";」でインポートして使用する。※インポートする際、「_」は必要ない

@media screen and (max-width: 768px) { }...スマホ表示UIサイズ

------------------------------------------------------------
メモ2
------------------------------------------------------------

動画教材コンテンツについて
LMS...e-ラーニング用のサービスで出来ている
出力
専用LMSだと文字起こし等がついている
MP4だと動画のみ
動画はSEのみ←全員
EEは入社する人のみ
テストはずべて自動採点
ツールLMSを並行して行う可能性もあるが、現状MP4でやる認識←LMSは確認する
ツールはeラボのPCを借りて使うことになる
動画はどこに保存してもよいAWSでもAzurでも

講義教材の各ページ名（ファイル名あり）
ファイル構成
章一覧ページ（何部の章一覧なのかを示す。chapterは各部に一つのみ）
02 / chapter
講義ページ(何部の教材の何章なのかを示す。lessonフォルダは一つのみで章が複数入る)
02 / lesson / 01( / learning)

-----------------------------------------------------
やること
-----------------------------------------------------

【追加機能・追加画面】
・【高】Q&A画面の新規作成
・【低】お知らせ更新情報機能の追加（トップ画面）

【Q&A画面について】
・画面数…Q&A一覧画面、Q&Aトップ画面、Q&A本文画面（質問の本文を表示する）、質問投稿画面、質問回答画面
・Q&A一覧画面…各質問を部と章に分け、アコーディオンメニューで管理。
・質問投稿画面…必須選択項目：章、入力欄：タイトル、質問内容、ソースコードを質問内容に記述できるようにする。
・Q&Aトップ画面…質問ルールが必要。どういった形で質問すればよく答えてもらえるか、テンプレ的なもの
・仕様…ユーザー同士が書き込み、閲覧。ソースコードを投稿できるようにする。
・機能…質問投稿、質問評価、ソート、閲覧
・用途…ユーザー同士で問題解決・過去の質問を閲覧し解決できる。
・質問のソート…最近の質問、回答のない質問、いいねが多い質問、あなたが投稿した質問、あなたが回答した質問を章ごとの質問に分ける。
				→これらのソート項目ごとに画面を作成するべきか。分けたほうが1頁あたりのデータ量は軽いのか、そこまで変わらないのか
・質問投稿設置場所（動画視聴画面）…章ごとの動画視聴画面に質問投稿コンテンツを配置し、hiddenステータスで何章での質問かサーバが受け取り管理。



=============================================================================
相談、レビュー等
=============================================================================

・Q&A機能について、ユーザー同士の解決はありかなしか、動画視聴画面に質問投稿を設置するか否か
・テストトップページの用途
・テスト実施画面、elaboのテストは内容のみか、そのまま使うのか、制限時間・回答数制限は付けるか、次へボタンで一問ずつにするか全表示か
・テスト結果画面、ソースコードのダウンロード可否（答えソースコードの設置）
・Javaコードのコンパイル、実行はAPIが必要。セキュリティ面で気を付ける必要があるらしい。SQLインジェクション攻撃的な可能性？

=============================================================================
開始・終了時確認事項
=============================================================================

□ 報告書の更新、開始・終了の報告

=============================================================================
***** スケジュール管理 *****
=============================================================================
【7/24〜7/28：40h】
-----------------------------------------------------------------------------
動画教材画面作成【高】10~15h → 10h
　[内訳]
・動画視聴画面作成 5h → 5h
・動画トップ画面スマホ表示UI修正 2h → 1.5h
・単元一覧画面スマホ表示UI修正 2h → 1.5h
・動画視聴画面スマホ表示UI修正 2h → 2h

メッセージ一覧画面スマホ表示UI【中】3h → 3h

********************** 【上記画面実績】 14h → 13h **********************

テスト画面作成【高】10~15h
追加項目相談・作成（機能、画面）【-】10~20h
レビュー・修正【-】1.5h
お知らせ更新情報機能（トップ画面）【低】