=============================================================================================================
メモ
=============================================================================================================

	GitHub コパイロット　拡張機能　ChatGPTの機能

下まで教材一覧をスクロールしたとき、追加ロードして教材一覧を追加表示←トランジション　読み込み制御

=============================================================================================================
データ管理
=============================================================================================================
ユーザーマスタ
	ユーザー情報、学習進捗、テスト成績、メッセージ、テスト回答、メモ欄
		一意のユーザーIDを持つ

ファイルサーバー
	履歴書、職務経歴書
		リネームする必要がある　プレフィックス en0001＿氏名_履歴書or職務経歴書,,,

教材
	動画教材
	テスト
	追加教材

=============================================================================================================
管理画面 ----- C：登録、R：照会、U：更新、D:物理削除（基本的になし）
=============================================================================================================

□ユーザー情報管理　新規1件　：S,R
□学習テスト情報管理	：S,R
□メッセージ対応　新着1件　：S,R,C,U
	ステータスを持つ、既読等
	検索、ステータスでフィルター
	メッセージ管理画面ではタブで、未読や返信済み等の切り替えをおこなえるようにする
□更新情報管理　：S,R,C,U
□テスト採点　新着1件　：S,R,C,U
	ステータスを持つ
	採点は点数化、コメント
	ステータスでフィルター

メッセージに送受信に必要なデータ情報：userID msgNO From/To Tree 属性 str
ゲストの送受信は必要ない：不具合報告はできるようにする←ステータスの制御でゲストは不具合報告ができるようにする
下書き有り
ゴミ箱に送られたメッセージは削除フラグがつき非表示
削除フラグは2つで本当の論理削除、ゴミ箱の削除フラグ
ゴミ箱の削除フラグは親Treeに付与される。親のみのフラグでTreeは検索できなくなる

ステータス：未送信（ユーザーのみ）、送信済み、未返信、返信済み、着信（ユーザーのみ）、下書き
	メッセージステータスはデータベースで管理

==================================================================
GoogleFonts
==================================================================
CDNのリンクをheadに読み込み
cssにimport
common cssにfont-famiryを適用

==================================================================
キャッチコピー
==================================================================

未経験でも大丈夫。エントランスが初心者に最適なIT学習環境を提供します。
未経験者のためのITエンジニア養成講座。エントランスがあなたの成長をサポート。
未経験のためのプログラミング講座サービス。あなたのIT挑戦を応援します。
未経験からエンジニアへの第一歩をサポート。エントランスで夢を実現しよう。
完全未経験からでもエンジニアに！エントランスがあなたのプログラミング学習をサポート。

------------------------------------------------------------
Scss
------------------------------------------------------------
@mixin...例えばボタンアローをどのボタンでも同じ形で使いまわしたい場合に「@mixin クラス名」を付けて作成すると、
		使用したいクラスの中で「@include クラス名」で使い回せるようになる

_variables.scss...変数をまとめたファイル。変数を使用するには、使用したいファイルの先頭で「@import "variables";」でインポートして使用する。※インポートする際、「_」は必要ない


------------------------------------------------------------
メモ2
------------------------------------------------------------

動画教材コンテンツについて
LMS...e-ラーニング用のサービスで出来ている
出力
専用LMSだと文字起こし等がついている
MP4だと動画のみ
動画はSEのみ←全員
EEは入社する人のみ
テストはずべて自動採点
ツールLMSを並行して行う可能性もあるが、現状MP4でやる認識←LMSは確認する
ツールはeラボのPCを借りて使うことになる
動画はどこに保存してもよいAWSでもAzurでも

position: fixed;を指定すると指定した部分が固定され、他の部分がスクロールできるようになる
position: sticky;　「ヘッダ用固定ポジション。スクロールしても固定され、fvの上にくるようになる（fvでヘッダ分のheightを調整しなくて良くなる)


単元の一覧を読み込むのであればスクロールする形
学習の仕方、単元の一覧はそれぞれ分ける

サイドメニューに学習の仕方というページ、単元の一覧のページを作る
単元一覧は、ひとつインデントを下げて今の公開、非公開のリストを表示
メインのほうは初めは学習の仕方が初期表示

単元一覧はJavaの参考書通りSEの方だけで良←中身も作っておく
EEの方はSEの方をぱくるだけだから気にしなくて良い

-----------------------------------------------------
やること
-----------------------------------------------------

□ 考課面談、目標管理シートの作成
・動画教材のテキスト変更※elabo教材を参照。
・メッセージ画面のレスポンシブデザイン作成


・サイドメニューを章にするか、部にするか。部にするなら3部構成で大まかなのでどこまで登録していない人に使わせないか決めないといけない
・講義動画を見終わった後に、学習完了ボタンを押下して次の動画またはテストを受けられるようにするのはどうか

ユーザー同士が解決し合うのはどうなのか。ありかなしか
・Q&Aのページを作成してそこにユーザー全員が書き込みをできるようにして、管理。
各章ごとのQ&Aページを作成して、Q&Aをまとめたページ（一覧ページ）を作成する

ユーザー同士がポイントを付けられるようにして、ポイントが高い人がランキングに載る
・ポイントはQ&Aでユーザー同士が問題を解決し合うときに使ったりする
ログイン日数でもポイント獲得、連続ログインで倍率またはプラスポイント付与
もちろん、テストの得点や進み具合も考慮


質問で解決しないときはチューターに質問するようにする
Q&Aページでユーザー同士が解決し合う場になるように

Q&Aトップページ
・最近の質問、回答のない質問、いいねが多い質問、あなたが投稿した質問、あなたが回答した質問
部や章ごとの質問に分ける

講義教材の各ページ名（ファイル名あり）

ファイル構成

章一覧ページ（何部の章一覧なのかを示す。chapterは各部に一つのみ）
02 / chapter
講義ページ(何部の教材の何章なのかを示す。lessonフォルダは一つのみで章が複数入る)
02 / lesson / 01( / learning)


・Testtopページは不要ではないか

埋め込みコードの作成可能なので使用するかどうか
実行はAPIが必要になってくる

・答えのコードを用意してダウンロード可能にするのはどうか←回答後の話、自動採点の画面で最後に使用したコードの解答例をダウンロードできるようにして
自分の環境で動かせるようにする

動画教材の画面イメージについてどうするか。コード入力部分の配置

=============================================================================
開始・終了時確認事項
=============================================================================

□ 報告書の更新、開始・終了の報告


報告書を細かく作成。
1週間で何を終わらせたいのか、
そのためにこの日には何を終わらせればよいのか分割する
一日の中でもどれくらいかかるのか
時間単位で項数を算出

1週間のスケジュールを立てて、それを履行する

自分の感覚で何時間かかるのか根拠を元に見積もる